{"version":3,"sources":["components/Header.tsx","components/InfoBox.tsx","components/Map.tsx","components/Table.tsx","data/countries.tsx","data/defaultTable.tsx","utils.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","props","onCountryChange","e","a","countryCode","target","value","setCountry","url","getData","data","setCountryInfo","className","FormControl","Select","variant","onChange","country","MenuItem","countries","map","name","InfoBox","Card","CardContent","Typography","color","title","cases","total","Map","Table","getCountryData","setCountries","fetch","then","response","json","countryInfo","iso2","table","updated","_id","iso3","lat","long","flag","todayCases","deaths","todayDeaths","recovered","todayRecovered","active","critical","casesPerOneMillion","deathsPerOneMillion","tests","testsPerOneMillion","population","continent","oneCasePerPeople","oneDeathPerPeople","oneTestPerPeople","activePerOneMillion","recoveredPerOneMillion","criticalPerOneMillion","sortData","sortedData","sort","b","App","React","useState","dData","tableData","setTableData","useEffect","tableD","sortedDataD","getAll","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAaaA,EAAS,SAACC,GACrB,IAAMC,EAAe,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAChBC,EAAcF,EAAEG,OAAOC,MAC7BN,EAAMO,WAAWH,GAGXI,EACY,cAAhBJ,EACI,qCADJ,mDAEgDA,GAR5B,SAUHJ,EAAMS,QAAQD,GAVX,OAUhBE,EAVgB,OAWtBV,EAAMW,eAAeD,GAXC,2CAAH,sDAarB,OACE,sBAAKE,UAAU,SAAf,UACE,kDAEA,cAACC,EAAA,EAAD,CAAaD,UAAU,WAAvB,SACE,eAACE,EAAA,EAAD,CACEC,QAAQ,WACRC,SAAUf,EACVK,MAAON,EAAMiB,QAHf,UAKE,cAACC,EAAA,EAAD,CAAUZ,MAAM,YAAhB,uBACCN,EAAMmB,UAAWC,KAAI,SAACH,GAAD,OACpB,cAACC,EAAA,EAAD,CAA6BZ,MAAOW,EAAQX,MAA5C,SACGW,EAAQI,MADIJ,EAAQI,kB,wBC9BtBC,EAAU,SAACtB,GACtB,OACE,8BACE,cAACuB,EAAA,EAAD,CAAMX,UAAU,UAAhB,SACE,eAACY,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYb,UAAU,QAAQc,MAAM,gBAApC,SACG1B,EAAM2B,QAET,qBAAIf,UAAU,QAAd,cAAwBZ,EAAM4B,SAC9B,eAACH,EAAA,EAAD,CAAYb,UAAU,QAAQc,MAAM,gBAApC,UACG1B,EAAM6B,MADT,oBChBGC,EAAM,WACjB,OACE,qBAAKlB,UAAU,MAAf,SACE,sDCEOmB,EAAQ,SAAC/B,GACpB,OACE,qBAAKY,UAAU,QAAf,SACGZ,EAAMmB,UAAUC,KAAI,SAACH,GAAD,OACnB,+BACE,6BAAKA,EAAQA,UACb,6BACE,iCAASA,EAAQW,YAHZX,EAAQA,eCTZe,EAAc,uCAAG,WAAOC,GAAP,SAAA9B,EAAA,sEACtB+B,MAAM,4CACTC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACzB,GACL,IAAMS,EAAYT,EAAKU,KAAI,SAACH,GAAD,MAAc,CACvCI,KAAMJ,EAAQA,QACdX,MAAOW,EAAQqB,YAAYC,SAE7BN,EAAad,MARW,2CAAH,sDAYdV,EAAO,uCAAG,WAAOD,GAAP,iBAAAL,EAAA,sEACF+B,MAAM1B,GADJ,cACf6B,EADe,OAEf3B,EAAO2B,EAAKA,OAFG,kBAGd3B,GAHc,2CAAH,sDCZP8B,G,MAAqB,CAChCC,QAAS,cACTxB,QAAS,yBACTqB,YAAa,CACXI,IAAK,IACLH,KAAM,KACNI,KAAM,MACNC,IAAK,GACLC,KAAM,GACNC,KAAM,8CAERlB,MAAO,MACPmB,WAAY,IACZC,OAAQ,IACRC,YAAa,EACbC,UAAW,KACXC,eAAgB,EAChBC,OAAQ,MACRC,SAAU,GACVC,mBAAoB,MACpBC,oBAAqB,IACrBC,MAAO,QACPC,mBAAoB,OACpBC,WAAY,QACZC,UAAW,SACXC,iBAAkB,GAClBC,kBAAmB,KACnBC,iBAAkB,EAClBC,oBAAqB,QACrBC,uBAAwB,QACxBC,sBAAuB,O,QChCZC,EAAW,SAACxD,GACvB,IAAMyD,EAAU,YAAOzD,GAUvB,OARAyD,EAAWC,MAAK,SAACjE,EAAGkE,GAClB,OAAIlE,EAAEyB,MAAQyC,EAAEzC,OACN,EAED,KAIJuC,GC8DMG,MAhEf,WAAgB,IAAD,EACqBC,IAAMC,SAAgC,IAD3D,mBACNrD,EADM,KACKc,EADL,OAEiBsC,IAAMC,SAAS,aAFhC,mBAENvD,EAFM,KAEGV,EAFH,OAGyBgE,IAAMC,WAH/B,mBAGNlC,EAHM,KAGO3B,EAHP,OAMqB4D,IAAMC,SAAwB,CAACC,IANpD,mBAMNC,EANM,KAMKC,EANL,KAoBb,OAZAJ,IAAMK,WAAU,YACF,uCAAG,gCAAAzE,EAAA,sEACMM,EAAQ,sCADd,cACPC,EADO,gBAEQD,EAAQ,4CAFhB,OAEPoE,EAFO,OAGPC,EAAcZ,EAASW,GAC7BlE,EAAeD,GACfiE,EAAaG,GACb9C,EAAeC,GANF,4CAAH,qDAQZ8C,KACC,IAGD,sBAAKnE,UAAU,MAAf,UACE,sBAAKA,UAAU,OAAf,UACE,cAAC,EAAD,CACEO,UAAWA,EACXF,QAASA,EACTV,WAAYA,EACZ+B,YAAaA,EACb3B,eAAgBA,EAChBF,QAASA,IAEX,sBAAKG,UAAU,YAAf,UACE,cAAC,EAAD,CACEe,MAAM,oBACNE,MAAK,OAAES,QAAF,IAAEA,OAAF,EAAEA,EAAaV,MACpBA,MAAK,OAAEU,QAAF,IAAEA,OAAF,EAAEA,EAAaS,aAEtB,cAAC,EAAD,CACEpB,MAAM,YACNE,MAAK,OAAES,QAAF,IAAEA,OAAF,EAAEA,EAAaY,UACpBtB,MAAK,OAAEU,QAAF,IAAEA,OAAF,EAAEA,EAAaa,iBAEtB,cAAC,EAAD,CACExB,MAAM,SACNE,MAAK,OAAES,QAAF,IAAEA,OAAF,EAAEA,EAAaU,OACpBpB,MAAK,OAAEU,QAAF,IAAEA,OAAF,EAAEA,EAAaW,iBAGxB,cAAC,EAAD,OAEF,qBAAKrC,UAAU,QAAf,SACE,cAACW,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,uDACA,cAAC,EAAD,CAAOL,UAAWuD,IAElB,gECnDGM,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB/C,MAAK,YAAkD,IAA/CgD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.38995349.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FormControl, Select, MenuItem } from '@material-ui/core';\r\nimport { Country, CountryData } from './../types';\r\n\r\ntype HeaderProps = {\r\n  countries: Country[] | undefined;\r\n  country: string;\r\n  setCountry: Function;\r\n  countryInfo: CountryData | undefined;\r\n  setCountryInfo: Function;\r\n  getData: Function;\r\n};\r\n\r\nexport const Header = (props: HeaderProps) => {\r\n  const onCountryChange = async (e: any) => {\r\n    const countryCode = e.target.value;\r\n    props.setCountry(countryCode);\r\n\r\n    // Call the api\r\n    const url =\r\n      countryCode === 'worldwide'\r\n        ? 'https://disease.sh/v3/covid-19/all'\r\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\r\n\r\n    const data = await props.getData(url);\r\n    props.setCountryInfo(data);\r\n  };\r\n  return (\r\n    <div className='header'>\r\n      <h1>COVID-19 Tracker</h1>\r\n\r\n      <FormControl className='dropdown'>\r\n        <Select\r\n          variant='outlined'\r\n          onChange={onCountryChange}\r\n          value={props.country}\r\n        >\r\n          <MenuItem value='worldwide'>Worldwide</MenuItem>\r\n          {props.countries!.map((country) => (\r\n            <MenuItem key={country.name} value={country.value}>\r\n              {country.name}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n};\r\n","import { Card, CardContent, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\ntype InfoProps = {\r\n  title: string;\r\n  cases?: number;\r\n  total?: number;\r\n};\r\n\r\nexport const InfoBox = (props: InfoProps) => {\r\n  return (\r\n    <div>\r\n      <Card className='infobox'>\r\n        <CardContent>\r\n          <Typography className='title' color='textSecondary'>\r\n            {props.title}\r\n          </Typography>\r\n          <h2 className='cases'>+{props.cases}</h2>\r\n          <Typography className='total' color='textSecondary'>\r\n            {props.total} Total\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nexport const Map = () => {\r\n  return (\r\n    <div className='map'>\r\n      <h1>Map (Coming soon)</h1>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { CountryData } from '../types';\r\n\r\ntype TableProps = {\r\n  countries: CountryData[];\r\n};\r\n\r\nexport const Table = (props: TableProps) => {\r\n  return (\r\n    <div className='table'>\r\n      {props.countries.map((country) => (\r\n        <tr key={country.country}>\r\n          <td>{country.country}</td>\r\n          <td>\r\n            <strong>{country.cases}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import { CountryData } from './../types';\r\n\r\nexport const getCountryData = async (setCountries: Function) => {\r\n  await fetch('https://disease.sh/v3/covid-19/countries')\r\n    .then((response) => response.json())\r\n    .then((data: CountryData[]) => {\r\n      const countries = data.map((country) => ({\r\n        name: country.country,\r\n        value: country.countryInfo.iso2,\r\n      }));\r\n      setCountries(countries);\r\n    });\r\n};\r\n\r\nexport const getData = async (url: string) => {\r\n  const json = await fetch(url);\r\n  const data = json.json();\r\n  return data;\r\n};\r\n","import { CountryData } from '../types';\r\n\r\nexport const table: CountryData = {\r\n  updated: 1616084947223,\r\n  country: 'Loading... Please wait',\r\n  countryInfo: {\r\n    _id: 246,\r\n    iso2: 'FI',\r\n    iso3: 'FIN',\r\n    lat: 64,\r\n    long: 26,\r\n    flag: 'https://disease.sh/assets/img/flags/fi.png',\r\n  },\r\n  cases: 69497,\r\n  todayCases: 804,\r\n  deaths: 805,\r\n  todayDeaths: 1,\r\n  recovered: 46000,\r\n  todayRecovered: 0,\r\n  active: 22692,\r\n  critical: 50,\r\n  casesPerOneMillion: 12529,\r\n  deathsPerOneMillion: 145,\r\n  tests: 3708679,\r\n  testsPerOneMillion: 668612,\r\n  population: 5546833,\r\n  continent: 'Europe',\r\n  oneCasePerPeople: 80,\r\n  oneDeathPerPeople: 6890,\r\n  oneTestPerPeople: 1,\r\n  activePerOneMillion: 4090.98,\r\n  recoveredPerOneMillion: 8293.02,\r\n  criticalPerOneMillion: 9.01,\r\n};\r\n","export const sortData = (data: any) => {\r\n  const sortedData = [...data];\r\n\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n\r\n  return sortedData;\r\n};\r\n","import React from 'react';\nimport { Header, InfoBox, Map, Table } from './components';\nimport { Country, CountryData } from './types';\nimport { getCountryData, getData } from './data';\nimport './App.css';\nimport { Card, CardContent } from '@material-ui/core';\nimport { table as dData } from './data/defaultTable';\nimport { sortData } from './utils';\n\nfunction App() {\n  const [countries, setCountries] = React.useState<Country[] | undefined>([]);\n  const [country, setCountry] = React.useState('worldwide');\n  const [countryInfo, setCountryInfo] = React.useState<\n    CountryData | undefined\n  >();\n  const [tableData, setTableData] = React.useState<CountryData[]>([dData]);\n\n  React.useEffect(() => {\n    const getAll = async () => {\n      const data = await getData('https://disease.sh/v3/covid-19/all');\n      const tableD = await getData('https://disease.sh/v3/covid-19/countries');\n      const sortedDataD = sortData(tableD);\n      setCountryInfo(data);\n      setTableData(sortedDataD);\n      getCountryData(setCountries);\n    };\n    getAll();\n  }, []);\n\n  return (\n    <div className='app'>\n      <div className='left'>\n        <Header\n          countries={countries}\n          country={country}\n          setCountry={setCountry}\n          countryInfo={countryInfo}\n          setCountryInfo={setCountryInfo}\n          getData={getData}\n        />\n        <div className='infoboxes'>\n          <InfoBox\n            title='Coronavirus cases'\n            total={countryInfo?.cases}\n            cases={countryInfo?.todayCases}\n          />\n          <InfoBox\n            title='Recovered'\n            total={countryInfo?.recovered}\n            cases={countryInfo?.todayRecovered}\n          />\n          <InfoBox\n            title='Deaths'\n            total={countryInfo?.deaths}\n            cases={countryInfo?.todayDeaths}\n          />\n        </div>\n        <Map />\n      </div>\n      <div className='right'>\n        <Card>\n          <CardContent>\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n\n            <h3>Worldwide new cases</h3>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}