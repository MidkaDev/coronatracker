{"version":3,"sources":["components/Header.tsx","utils.tsx","components/InfoBox.tsx","components/Map.tsx","components/Table.tsx","data/countries.tsx","components/LineGraph.tsx","data/defaultTable.tsx","App.tsx","reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["Header","props","className","lastUpdate","FormControl","Select","variant","onChange","onCountryChange","value","country","MenuItem","countries","map","name","sortData","data","sort","a","b","cases","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","casesTypeColors","hex","multiplier","recovered","deaths","prettyPrintStat","stat","numeral","format","convertUnixToDate","unix","moment","fromNow","InfoBox","Card","active","isRed","onClick","CardContent","Typography","color","title","total","Map","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","type","Circle","countryInfo","lat","long","fillOpacity","pathOptions","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","ChangeView","useMap","setView","Table","getCountryInfo","code","getData","getHistoricalData","days","getCountryData","setCountries","fetch","then","response","json","iso2","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","scales","xAxes","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","React","useState","setData","useEffect","fetchData","datasets","backgroundColor","borderColor","table","updated","_id","iso3","todayCases","todayDeaths","todayRecovered","critical","casesPerOneMillion","deathsPerOneMillion","tests","testsPerOneMillion","population","continent","oneCasePerPeople","oneDeathPerPeople","oneTestPerPeople","activePerOneMillion","recoveredPerOneMillion","criticalPerOneMillion","App","setCasesType","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCountry","setCountryInfo","dData","tableData","setTableData","tableD","sortedDataD","getAll","e","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.9f36fe8b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FormControl, Select, MenuItem } from '@material-ui/core';\r\nimport { Country } from './../types';\r\n\r\ntype HeaderProps = {\r\n  countries: Country[] | undefined;\r\n  country: string;\r\n  onCountryChange: any;\r\n  lastUpdate: any;\r\n};\r\n\r\nexport const Header = (props: HeaderProps) => {\r\n  return (\r\n    <div className='header'>\r\n      <h1>COVID-19 Tracker</h1>\r\n\r\n      <h5 className='lastupdate'>Last update: {props.lastUpdate}</h5>\r\n\r\n      <FormControl className='dropdown'>\r\n        <Select\r\n          variant='outlined'\r\n          onChange={props.onCountryChange}\r\n          value={props.country}\r\n        >\r\n          <MenuItem value='worldwide'>Worldwide</MenuItem>\r\n          {props.countries!.map((country) => (\r\n            <MenuItem key={country.name} value={country.value}>\r\n              {country.name}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n};\r\n","import { CountryData, Historical, CaseTypes } from './types';\r\nimport { Circle, Popup } from 'react-leaflet';\r\nimport numeral from 'numeral';\r\nimport moment from 'moment';\r\n\r\nexport const sortData = (data: CountryData[]) => {\r\n  return data.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n};\r\n\r\nexport const buildChartData = (data: Historical, casesType: CaseTypes) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: '#CC1034',\r\n    multiplier: 500,\r\n  },\r\n  recovered: {\r\n    hex: '#7dd71d',\r\n    multiplier: 500,\r\n  },\r\n  deaths: {\r\n    hex: '#fb4443',\r\n    multiplier: 1700,\r\n  },\r\n};\r\n\r\nexport const showDataOnMap = (data: CountryData[], type: CaseTypes) =>\r\n  data.map((country) => (\r\n    <Circle\r\n      key={country.country}\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      pathOptions={{\r\n        color: casesTypeColors[type].hex,\r\n        fillColor: casesTypeColors[type].hex,\r\n      }}\r\n      radius={Math.sqrt(country[type]) * casesTypeColors[type].multiplier}\r\n    >\r\n      <Popup>\r\n        <div className='info-container'>\r\n          <div\r\n            className='info-flag'\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className='info-name'>{country.country}</div>\r\n          <div className='info-confirmed'>\r\n            Cases: {numeral(country.cases).format('0,0')}\r\n          </div>\r\n          <div className='info-recovered'>\r\n            Recovered: {numeral(country.recovered).format('0,0')}\r\n          </div>\r\n          <div className='info-deaths'>\r\n            Deaths: {numeral(country.deaths).format('0,0')}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n\r\nexport const prettyPrintStat = (stat: number) => {\r\n  return stat ? numeral(stat).format('0.0a') : '0';\r\n};\r\n\r\nexport const convertUnixToDate = (unix: number | undefined) => {\r\n  if (unix) {\r\n    return moment(unix).fromNow();\r\n  }\r\n};\r\n","import React from 'react';\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\nimport './../css/InfoBox.css';\r\nimport { prettyPrintStat } from './../utils';\r\n\r\ntype InfoProps = {\r\n  isRed: boolean;\r\n  active: boolean;\r\n  onClick: any;\r\n  title: string;\r\n  cases?: number;\r\n  total?: number;\r\n};\r\n\r\nexport const InfoBox = (props: InfoProps) => {\r\n  return (\r\n    <Card\r\n      className={`infobox ${props.active && 'infobox--selected'} ${\r\n        props.isRed && 'infobox--isRed'\r\n      }`}\r\n      onClick={props.onClick}\r\n    >\r\n      <CardContent>\r\n        <Typography className='title' color='textSecondary'>\r\n          {props.title}\r\n        </Typography>\r\n        <h2 className={`cases ${!props.isRed && 'infobox--notRed'}`}>\r\n          +{prettyPrintStat(props.cases!)}\r\n        </h2>\r\n        <Typography className='total' color='textSecondary'>\r\n          {prettyPrintStat(props.total!)} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport './../css/Map.css';\r\nimport { TileLayer, MapContainer, useMap } from 'react-leaflet';\r\nimport { CountryData, CaseTypes } from '../types';\r\nimport { showDataOnMap } from '../utils';\r\n\r\ntype MapProps = {\r\n  zoom: number;\r\n  center: any;\r\n  countries: CountryData[] | undefined;\r\n  type: CaseTypes;\r\n};\r\n\r\nexport const Map = (props: MapProps) => {\r\n  return (\r\n    <div className='map'>\r\n      <MapContainer\r\n        center={props.center}\r\n        zoom={props.zoom}\r\n        scrollWheelZoom={false}\r\n      >\r\n        <ChangeView center={props.center} zoom={props.zoom} />\r\n        <TileLayer\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\r\n        />\r\n        {props.countries ? (\r\n          showDataOnMap(props.countries!, props.type)\r\n        ) : (\r\n          <div></div>\r\n        )}\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\ntype ChangeViewProps = {\r\n  center: any;\r\n  zoom: number;\r\n};\r\n\r\nconst ChangeView = (props: ChangeViewProps) => {\r\n  const map = useMap();\r\n  map.setView(props.center, props.zoom);\r\n  return <div></div>;\r\n};\r\n","import React from 'react';\r\nimport { CountryData } from '../types';\r\nimport numeral from 'numeral';\r\n\r\ntype TableProps = {\r\n  countries: CountryData[];\r\n};\r\n\r\nexport const Table = (props: TableProps) => {\r\n  return (\r\n    <div className='table'>\r\n      <table>\r\n        <tbody>\r\n          {props.countries.map((country) => (\r\n            <tr key={country.country}>\r\n              <td>{country.country}</td>\r\n              <td>\r\n                <strong>{numeral(country.cases).format('0,0')}</strong>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n","import { CountryData } from './../types';\r\n\r\nexport const getCountryInfo = async (code: string) => {\r\n  const url =\r\n    code === 'worldwide'\r\n      ? 'https://disease.sh/v3/covid-19/all'\r\n      : `https://disease.sh/v3/covid-19/countries/${code}`;\r\n\r\n  const data = await getData(url);\r\n  if (code === 'worldwide') {\r\n    return {\r\n      ...data,\r\n      countryInfo: {\r\n        lat: 34.80746,\r\n        long: -40.4796,\r\n      },\r\n    };\r\n  } else {\r\n    return data;\r\n  }\r\n};\r\n\r\nexport const getHistoricalData = async (days: number) => {\r\n  const url = `https://disease.sh/v3/covid-19/historical/all?lastdays=${days}`;\r\n  return await getData(url);\r\n};\r\n\r\nexport const getCountryData = async (setCountries: Function) => {\r\n  await fetch('https://disease.sh/v3/covid-19/countries')\r\n    .then((response) => response.json())\r\n    .then((data: CountryData[]) => {\r\n      const countries = data.map((country) => ({\r\n        name: country.country,\r\n        value: country.countryInfo.iso2,\r\n      }));\r\n      setCountries(countries);\r\n    });\r\n};\r\n\r\nexport const getData = async (url: string) => {\r\n  const json = await fetch(url);\r\n  return json.json();\r\n};\r\n","import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from 'numeral';\r\nimport { getHistoricalData } from '../data/countries';\r\nimport { buildChartData } from '../utils';\r\n\r\ntype LineGraphProps = {\r\n  type: 'cases' | 'deaths' | 'recovered';\r\n};\r\n\r\n// https://disease.sh/v3/covid-19/historical/all?lastdays=120\r\n\r\nconst options: any = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: 'index',\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem: any, data: any) {\r\n        return numeral(tooltipItem.value).format('+0,0');\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: 'time',\r\n        time: {\r\n          format: 'MM/DD/YY',\r\n          tooltipFormat: 'll',\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value: any, index: any, values: any[]) {\r\n            return numeral(value).format('0a');\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nexport const LineGraph = (props: LineGraphProps) => {\r\n  const [data, setData] = React.useState<any[]>();\r\n\r\n  React.useEffect(() => {\r\n    const fetchData = async () => {\r\n      const data = await getHistoricalData(120);\r\n      const chartData = buildChartData(data, props.type);\r\n      setData(chartData);\r\n    };\r\n    fetchData();\r\n  }, [props.type]);\r\n  return (\r\n    <div className='graph'>\r\n      <Line\r\n        data={{\r\n          datasets: [\r\n            {\r\n              backgroundColor: 'rgba(204, 16, 52, 0.5)',\r\n              borderColor: '#CC1034',\r\n              data: data,\r\n            },\r\n          ],\r\n        }}\r\n        options={options}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { CountryData } from '../types';\r\n\r\nexport const table: CountryData = {\r\n  updated: 1616084947223,\r\n  country: 'Loading... Please wait',\r\n  countryInfo: {\r\n    _id: 1,\r\n    iso2: 'FI',\r\n    iso3: 'FIN',\r\n    lat: 64,\r\n    long: 26,\r\n    flag: 'https://disease.sh/assets/img/flags/fi.png',\r\n  },\r\n  cases: 1,\r\n  todayCases: 1,\r\n  deaths: 1,\r\n  todayDeaths: 1,\r\n  recovered: 1,\r\n  todayRecovered: 1,\r\n  active: 1,\r\n  critical: 1,\r\n  casesPerOneMillion: 1,\r\n  deathsPerOneMillion: 1,\r\n  tests: 1,\r\n  testsPerOneMillion: 1,\r\n  population: 1,\r\n  continent: 'Europe',\r\n  oneCasePerPeople: 1,\r\n  oneDeathPerPeople: 1,\r\n  oneTestPerPeople: 1,\r\n  activePerOneMillion: 1.11,\r\n  recoveredPerOneMillion: 1.01,\r\n  criticalPerOneMillion: 1.01,\r\n};\r\n","import React from 'react';\r\nimport { Header, InfoBox, LineGraph, Map, Table } from './components';\r\nimport { CaseTypes, Country, CountryData } from './types';\r\nimport { getCountryData, getData } from './data';\r\nimport './App.css';\r\nimport { Card, CardContent } from '@material-ui/core';\r\nimport { table as dData } from './data/defaultTable';\r\nimport { convertUnixToDate, sortData } from './utils';\r\nimport { getCountryInfo } from './data/countries';\r\n\r\nfunction App() {\r\n  const [casesType, setCasesType] = React.useState<CaseTypes>('cases');\r\n  const [mapCenter, setMapCenter] = React.useState<any[]>([34.80746, -40.4796]);\r\n  const [mapZoom, setMapZoom] = React.useState<number>(3);\r\n  const [countries, setCountries] = React.useState<Country[] | undefined>([]);\r\n  const [mapCountries, setMapCountries] = React.useState<\r\n    CountryData[] | undefined\r\n  >([]);\r\n  const [country, setCountry] = React.useState<string>('worldwide');\r\n  const [countryInfo, setCountryInfo] = React.useState<\r\n    CountryData | undefined\r\n  >();\r\n  const [tableData, setTableData] = React.useState<CountryData[]>([dData]);\r\n\r\n  React.useEffect(() => {\r\n    const getAll = async () => {\r\n      const data = await getData('https://disease.sh/v3/covid-19/all');\r\n      const tableD = await getData('https://disease.sh/v3/covid-19/countries');\r\n      const sortedDataD = sortData(tableD);\r\n      setCountryInfo(data);\r\n      setTableData(sortedDataD);\r\n      setMapCountries(tableD);\r\n      getCountryData(setCountries);\r\n    };\r\n    getAll();\r\n  }, []);\r\n\r\n  const onCountryChange = async (e: any) => {\r\n    const code = e.target.value;\r\n    setCountry(code);\r\n    const data = await getCountryInfo(code);\r\n    setCountryInfo(data);\r\n    setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\r\n    if (code === 'worldwide') {\r\n      setMapZoom(3);\r\n    } else {\r\n      setMapZoom(4);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='app'>\r\n      <div className='left'>\r\n        <Header\r\n          countries={countries}\r\n          country={country}\r\n          onCountryChange={onCountryChange}\r\n          lastUpdate={convertUnixToDate(countryInfo?.updated)}\r\n        />\r\n        <div className='infoboxes'>\r\n          <InfoBox\r\n            isRed\r\n            active={casesType === 'cases'}\r\n            onClick={(e: any) => setCasesType('cases')}\r\n            title='Cases'\r\n            total={countryInfo?.cases}\r\n            cases={countryInfo?.todayCases}\r\n          />\r\n          <InfoBox\r\n            isRed={false}\r\n            active={casesType === 'recovered'}\r\n            onClick={(e: any) => setCasesType('recovered')}\r\n            title='Recovered'\r\n            total={countryInfo?.recovered}\r\n            cases={countryInfo?.todayRecovered}\r\n          />\r\n          <InfoBox\r\n            isRed\r\n            active={casesType === 'deaths'}\r\n            onClick={(e: any) => setCasesType('deaths')}\r\n            title='Deaths'\r\n            total={countryInfo?.deaths}\r\n            cases={countryInfo?.todayDeaths}\r\n          />\r\n        </div>\r\n        <Map\r\n          countries={mapCountries}\r\n          center={mapCenter}\r\n          zoom={mapZoom}\r\n          type={casesType}\r\n        />\r\n      </div>\r\n      <div className='right'>\r\n        <Card>\r\n          <CardContent>\r\n            <h3>Total Cases by Country</h3>\r\n            <Table countries={tableData} />\r\n            <h3>Worldwide new {casesType}</h3>\r\n            <LineGraph type={casesType} />\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}