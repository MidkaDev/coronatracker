{"version":3,"sources":["components/Header.tsx","components/InfoBox.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","props","onCountryChange","e","a","countryCode","target","value","setCountry","className","FormControl","Select","variant","onChange","country","MenuItem","countries","map","name","InfoBox","Card","CardContent","Typography","color","title","cases","total","App","React","useState","setCountries","useEffect","fetch","then","response","json","data","countryInfo","iso2","getCountryData","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAUaA,EAAS,SAACC,GACrB,IAAMC,EAAe,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sDAChBC,EAAcF,EAAEG,OAAOC,MAC7BN,EAAMO,WAAWH,GAFK,2CAAH,sDAIrB,OACE,sBAAKI,UAAU,SAAf,UACE,kDAEA,cAACC,EAAA,EAAD,CAAaD,UAAU,WAAvB,SACE,eAACE,EAAA,EAAD,CACEC,QAAQ,WACRC,SAAUX,EACVK,MAAON,EAAMa,QAHf,UAKE,cAACC,EAAA,EAAD,CAAUR,MAAM,YAAhB,uBACCN,EAAMe,UAAWC,KAAI,SAACH,GAAD,OACpB,cAACC,EAAA,EAAD,CAA6BR,MAAOO,EAAQP,MAA5C,SACGO,EAAQI,MADIJ,EAAQI,kB,wBClBtBC,EAAU,SAAClB,GACtB,OACE,8BACE,cAACmB,EAAA,EAAD,CAAMX,UAAU,UAAhB,SACE,eAACY,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYb,UAAU,QAAQc,MAAM,gBAApC,SACGtB,EAAMuB,QAET,oBAAIf,UAAU,QAAd,SAAuBR,EAAMwB,QAC7B,eAACH,EAAA,EAAD,CAAYb,UAAU,QAAQc,MAAM,gBAApC,UACGtB,EAAMyB,MADT,oB,MCmBKC,MAhCf,WAAgB,IAAD,EACqBC,IAAMC,SAAgC,IAD3D,mBACNb,EADM,KACKc,EADL,OAEiBF,IAAMC,SAAS,aAFhC,mBAENf,EAFM,KAEGN,EAFH,KAoBb,OAfAoB,IAAMG,WAAU,YACM,uCAAG,sBAAA3B,EAAA,sEACf4B,MAAM,4CACTC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,IAAMpB,EAAYoB,EAAKnB,KAAI,SAACH,GAAD,MAAc,CACvCI,KAAMJ,EAAQA,QACdP,MAAOO,EAAQuB,YAAYC,SAE7BR,EAAad,MARI,2CAAH,qDAWpBuB,KACC,IAGD,sBAAK9B,UAAU,MAAf,UACE,cAAC,EAAD,CAAQO,UAAWA,EAAWF,QAASA,EAASN,WAAYA,IAC5D,sBAAKC,UAAU,YAAf,UACE,cAAC,EAAD,CAASe,MAAM,oBAAoBE,MAAO,IAAMD,MAAO,MACvD,cAAC,EAAD,CAASD,MAAM,YAAYE,MAAO,IAAMD,MAAO,MAC/C,cAAC,EAAD,CAASD,MAAM,SAASE,MAAO,IAAMD,MAAO,aCjBrCe,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b8812871.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FormControl, Select, MenuItem } from '@material-ui/core';\r\nimport { Country } from './../types';\r\n\r\ntype HeaderProps = {\r\n  countries: Country[] | undefined;\r\n  country: string;\r\n  setCountry: Function;\r\n};\r\n\r\nexport const Header = (props: HeaderProps) => {\r\n  const onCountryChange = async (e: any) => {\r\n    const countryCode = e.target.value;\r\n    props.setCountry(countryCode);\r\n  };\r\n  return (\r\n    <div className='header'>\r\n      <h1>COVID-19 Tracker</h1>\r\n\r\n      <FormControl className='dropdown'>\r\n        <Select\r\n          variant='outlined'\r\n          onChange={onCountryChange}\r\n          value={props.country}\r\n        >\r\n          <MenuItem value='worldwide'>Worldwide</MenuItem>\r\n          {props.countries!.map((country) => (\r\n            <MenuItem key={country.name} value={country.value}>\r\n              {country.name}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n};\r\n","import { Card, CardContent, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\ntype InfoProps = {\r\n  title: string;\r\n  cases: number;\r\n  total: number;\r\n};\r\n\r\nexport const InfoBox = (props: InfoProps) => {\r\n  return (\r\n    <div>\r\n      <Card className='infobox'>\r\n        <CardContent>\r\n          <Typography className='title' color='textSecondary'>\r\n            {props.title}\r\n          </Typography>\r\n          <h2 className='cases'>{props.cases}</h2>\r\n          <Typography className='total' color='textSecondary'>\r\n            {props.total} Total\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\nimport { Header, InfoBox } from './components';\nimport { Country, CountryData } from './types';\nimport './App.css';\n\nfunction App() {\n  const [countries, setCountries] = React.useState<Country[] | undefined>([]);\n  const [country, setCountry] = React.useState('worldwide');\n\n  // fetching data\n  React.useEffect(() => {\n    const getCountryData = async () => {\n      await fetch('https://disease.sh/v3/covid-19/countries')\n        .then((response) => response.json())\n        .then((data: CountryData[]) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          setCountries(countries);\n        });\n    };\n    getCountryData();\n  }, []);\n\n  return (\n    <div className='App'>\n      <Header countries={countries} country={country} setCountry={setCountry} />\n      <div className='infoboxes'>\n        <InfoBox title='Coronavirus cases' total={2000} cases={2000} />\n        <InfoBox title='Recovered' total={2000} cases={2000} />\n        <InfoBox title='Deaths' total={2000} cases={2000} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}