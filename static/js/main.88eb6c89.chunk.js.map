{"version":3,"sources":["components/Header.tsx","components/InfoBox.tsx","components/Map.tsx","components/Table.tsx","utils.tsx","data/countries.tsx","components/LineGraph.tsx","data/defaultTable.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","props","className","FormControl","Select","variant","onChange","onCountryChange","value","country","MenuItem","countries","map","name","InfoBox","Card","CardContent","Typography","color","title","cases","total","Map","Table","sortData","data","sort","a","b","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","getCountryInfo","code","setCountryInfo","url","getData","getHistoricalData","days","setData","type","getCountryData","setCountries","fetch","then","response","json","countryInfo","iso2","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","numeral","format","scales","xAxes","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","React","useState","useEffect","fetchData","datasets","backgroundColor","borderColor","table","updated","_id","iso3","lat","long","flag","todayCases","deaths","todayDeaths","recovered","todayRecovered","active","critical","casesPerOneMillion","deathsPerOneMillion","tests","testsPerOneMillion","population","continent","oneCasePerPeople","oneDeathPerPeople","oneTestPerPeople","activePerOneMillion","recoveredPerOneMillion","criticalPerOneMillion","App","setCountry","dData","tableData","setTableData","tableD","sortedDataD","getAll","e","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.88eb6c89.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FormControl, Select, MenuItem } from '@material-ui/core';\r\nimport { Country } from './../types';\r\n\r\ntype HeaderProps = {\r\n  countries: Country[] | undefined;\r\n  country: string;\r\n  onCountryChange: any;\r\n};\r\n\r\nexport const Header = (props: HeaderProps) => {\r\n  return (\r\n    <div className='header'>\r\n      <h1>COVID-19 Tracker</h1>\r\n\r\n      <FormControl className='dropdown'>\r\n        <Select\r\n          variant='outlined'\r\n          onChange={props.onCountryChange}\r\n          value={props.country}\r\n        >\r\n          <MenuItem value='worldwide'>Worldwide</MenuItem>\r\n          {props.countries!.map((country) => (\r\n            <MenuItem key={country.name} value={country.value}>\r\n              {country.name}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n};\r\n","import { Card, CardContent, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\ntype InfoProps = {\r\n  title: string;\r\n  cases?: number;\r\n  total?: number;\r\n};\r\n\r\nexport const InfoBox = (props: InfoProps) => {\r\n  return (\r\n    <div>\r\n      <Card className='infobox'>\r\n        <CardContent>\r\n          <Typography className='title' color='textSecondary'>\r\n            {props.title}\r\n          </Typography>\r\n          <h2 className='cases'>+{props.cases}</h2>\r\n          <Typography className='total' color='textSecondary'>\r\n            {props.total} Total\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nexport const Map = () => {\r\n  return (\r\n    <div className='map'>\r\n      <h1>Map (Coming soon)</h1>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { CountryData } from '../types';\r\n\r\ntype TableProps = {\r\n  countries: CountryData[];\r\n};\r\n\r\nexport const Table = (props: TableProps) => {\r\n  return (\r\n    <div className='table'>\r\n      {props.countries.map((country) => (\r\n        <tr key={country.country}>\r\n          <td>{country.country}</td>\r\n          <td>\r\n            <strong>{country.cases}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import { Historical } from './types';\r\n\r\nexport const sortData = (data: any) => {\r\n  return [...data].sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n};\r\n\r\nexport const buildChartData = (\r\n  data: Historical,\r\n  casesType: 'cases' | 'deaths' | 'recovered'\r\n) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n","import { CountryData } from './../types';\r\nimport { buildChartData } from './../utils';\r\n\r\nexport const getCountryInfo = async (\r\n  code: string,\r\n  setCountryInfo: Function\r\n) => {\r\n  const url =\r\n    code === 'worldwide'\r\n      ? 'https://disease.sh/v3/covid-19/all'\r\n      : `https://disease.sh/v3/covid-19/countries/${code}`;\r\n  const data = await getData(url);\r\n  setCountryInfo(data);\r\n};\r\n\r\nexport const getHistoricalData = async (\r\n  days: number,\r\n  setData: Function,\r\n  type: 'cases' | 'deaths' | 'recovered'\r\n) => {\r\n  const url = `https://disease.sh/v3/covid-19/historical/all?lastdays=${days}`;\r\n  const data = await getData(url);\r\n  const chartData = buildChartData(data, type);\r\n  setData(chartData);\r\n};\r\n\r\nexport const getCountryData = async (setCountries: Function) => {\r\n  await fetch('https://disease.sh/v3/covid-19/countries')\r\n    .then((response) => response.json())\r\n    .then((data: CountryData[]) => {\r\n      const countries = data.map((country) => ({\r\n        name: country.country,\r\n        value: country.countryInfo.iso2,\r\n      }));\r\n      setCountries(countries);\r\n    });\r\n};\r\n\r\nexport const getData = async (url: string) => {\r\n  const json = await fetch(url);\r\n  const data = json.json();\r\n  return data;\r\n};\r\n","import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from 'numeral';\r\nimport { getHistoricalData } from '../data/countries';\r\n\r\ntype LineGraphProps = {\r\n  type: 'cases' | 'deaths' | 'recovered';\r\n};\r\n\r\n// https://disease.sh/v3/covid-19/historical/all?lastdays=120\r\n\r\nconst options: any = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: 'index',\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem: any, data: any) {\r\n        return numeral(tooltipItem.value).format('+0,0');\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: 'time',\r\n        time: {\r\n          format: 'MM/DD/YY',\r\n          tooltipFormat: 'll',\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value: any, index: any, values: any[]) {\r\n            return numeral(value).format('0a');\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nexport const LineGraph = (props: LineGraphProps) => {\r\n  const [data, setData] = React.useState<any[]>();\r\n\r\n  React.useEffect(() => {\r\n    const fetchData = async () => {\r\n      await getHistoricalData(120, setData, 'cases');\r\n    };\r\n    fetchData();\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Line\r\n        data={{\r\n          datasets: [\r\n            {\r\n              backgroundColor: 'rgba(204, 16, 52, 0.5)',\r\n              borderColor: '#CC1034',\r\n              data: data,\r\n            },\r\n          ],\r\n        }}\r\n        options={options}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { CountryData } from '../types';\r\n\r\nexport const table: CountryData = {\r\n  updated: 1616084947223,\r\n  country: 'Loading... Please wait',\r\n  countryInfo: {\r\n    _id: 1,\r\n    iso2: 'FI',\r\n    iso3: 'FIN',\r\n    lat: 64,\r\n    long: 26,\r\n    flag: 'https://disease.sh/assets/img/flags/fi.png',\r\n  },\r\n  cases: 1,\r\n  todayCases: 1,\r\n  deaths: 1,\r\n  todayDeaths: 1,\r\n  recovered: 1,\r\n  todayRecovered: 1,\r\n  active: 1,\r\n  critical: 1,\r\n  casesPerOneMillion: 1,\r\n  deathsPerOneMillion: 1,\r\n  tests: 1,\r\n  testsPerOneMillion: 1,\r\n  population: 1,\r\n  continent: 'Europe',\r\n  oneCasePerPeople: 1,\r\n  oneDeathPerPeople: 1,\r\n  oneTestPerPeople: 1,\r\n  activePerOneMillion: 1.11,\r\n  recoveredPerOneMillion: 1.01,\r\n  criticalPerOneMillion: 1.01,\r\n};\r\n","import React from 'react';\r\nimport { Header, InfoBox, LineGraph, Map, Table } from './components';\r\nimport { Country, CountryData } from './types';\r\nimport { getCountryData, getData } from './data';\r\nimport './App.css';\r\nimport { Card, CardContent } from '@material-ui/core';\r\nimport { table as dData } from './data/defaultTable';\r\nimport { sortData } from './utils';\r\nimport { getCountryInfo } from './data/countries';\r\n\r\nfunction App() {\r\n  const [countries, setCountries] = React.useState<Country[] | undefined>([]);\r\n  const [country, setCountry] = React.useState('worldwide');\r\n  const [countryInfo, setCountryInfo] = React.useState<\r\n    CountryData | undefined\r\n  >();\r\n  const [tableData, setTableData] = React.useState<CountryData[]>([dData]);\r\n\r\n  React.useEffect(() => {\r\n    const getAll = async () => {\r\n      const data = await getData('https://disease.sh/v3/covid-19/all');\r\n      const tableD = await getData('https://disease.sh/v3/covid-19/countries');\r\n      const sortedDataD = sortData(tableD);\r\n      setCountryInfo(data);\r\n      setTableData(sortedDataD);\r\n      getCountryData(setCountries);\r\n    };\r\n    getAll();\r\n  }, []);\r\n\r\n  const onCountryChange = async (e: any) => {\r\n    const code = e.target.value;\r\n    setCountry(code);\r\n    getCountryInfo(code, setCountryInfo);\r\n  };\r\n\r\n  return (\r\n    <div className='app'>\r\n      <div className='left'>\r\n        <Header\r\n          countries={countries}\r\n          country={country}\r\n          onCountryChange={onCountryChange}\r\n        />\r\n        <div className='infoboxes'>\r\n          <InfoBox\r\n            title='Coronavirus cases'\r\n            total={countryInfo?.cases}\r\n            cases={countryInfo?.todayCases}\r\n          />\r\n          <InfoBox\r\n            title='Recovered'\r\n            total={countryInfo?.recovered}\r\n            cases={countryInfo?.todayRecovered}\r\n          />\r\n          <InfoBox\r\n            title='Deaths'\r\n            total={countryInfo?.deaths}\r\n            cases={countryInfo?.todayDeaths}\r\n          />\r\n        </div>\r\n        <Map />\r\n      </div>\r\n      <div className='right'>\r\n        <Card>\r\n          <CardContent>\r\n            <h3>Total Cases by Country</h3>\r\n            <Table countries={tableData} />\r\n            <h3>Worldwide new cases</h3>\r\n            <LineGraph type='cases' />\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}